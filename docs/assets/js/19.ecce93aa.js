(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{376:function(t,e,n){"use strict";n.r(e);var a=n(44),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"准备工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),n("h3",{attrs:{id:"下载software-development-kit-sdk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下载software-development-kit-sdk"}},[t._v("#")]),t._v(" 下载Software Development Kit(SDK)")]),t._v(" "),n("ul",[n("li",[t._v("进入"),n("a",{attrs:{href:"https://www.openncc.com.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("点击"),n("font",{attrs:{color:"blue"}},[n("strong",[t._v("→")])]),t._v("访问SDK仓库")],1)]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/download.png",alt:"img"}})]),t._v(" "),n("ul",[n("li",[t._v("下载压缩包或复制地址使用Git克隆即可。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/git.png",alt:"image-20210702134237102"}})]),t._v(" "),n("p",[t._v("下载完成后进入"),n("code",[t._v("openncc/Platform")]),t._v("，目录如下图：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("└─ Platform\n├─ Linux\n|   └─ NVIDIA\n|   └─ RaspberryPi\n|   └─ Ubuntu\n├─ Windows\n├─ Custom\n├─ README.md\n")])])]),n("p",[t._v("选择需求的文件目录进入，对应文件夹内包含环境搭建的脚本。")]),t._v(" "),n("hr"),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("警告：环境搭建脚本会自动生成和覆盖相关文件，运行前请确认是首次运行或已经完成备份。")])],1),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"快速入门之linux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门之linux"}},[t._v("#")]),t._v(" 快速入门之linux")]),t._v(" "),n("h3",{attrs:{id:"环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("ul",[n("li",[t._v("进入目录"),n("code",[t._v("opennccc/Platform/Linux/Ubuntu")]),t._v("。")]),t._v(" "),n("li",[t._v("右键打开终端。")]),t._v(" "),n("li",[t._v("输入命令 "),n("code",[t._v("./build_ubuntu.sh")]),t._v("。")])]),t._v(" "),n("p",[t._v("生成目录如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("└─ Ubuntu\n\t├─ Example\n\t├─ Source\n\t├─ Viewer\n\t├─ build_Ubuntu.sh\n\t├─ README.md\n")])])]),n("h3",{attrs:{id:"openncc-linux操作演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openncc-linux操作演示"}},[t._v("#")]),t._v(" OpenNCC_Linux操作演示")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("进入openncc/Platform/Linux/Ubuntu/Viewer/OpenNcc_Linux 目录。")])]),t._v(" "),n("li",[n("p",[t._v("右键打开终端，执行"),n("code",[t._v("sudo ./AppRun")]),t._v("，启动软件。")])]),t._v(" "),n("li",[n("p",[t._v("连接OpenNCC相机到电脑USB 3.0接口，点击"),n("code",[t._v("Get device info")]),t._v(" 按钮获取设备信息，此时log区域会有两种提示：")]),t._v(" "),n("p",[t._v("- USB3.0：USB interface is 3.0, yuv outflow is currently available。")]),t._v(" "),n("p",[t._v("- USB2.0：USB interface is not 3.0, yuv outflow will be disabled。")])])]),t._v(" "),n("hr"),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("提示：OpenNCC TYPE-C接口有正反接入两种模式，分别对应USB3.0 和 USB2.0。受传输速率影响，USB2.0模式下会暂时禁用YUV420P格式的视频流输出 。")])],1),t._v(" "),n("hr"),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view1.png",alt:"image-20210702142441399"}})]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view2.png",alt:"image-20210702142529686"}})]),t._v(" "),n("p",[t._v("​\t\t如果需要切换USB模式，旋转TPYE-C接口再次接入，重新点击Get device info按钮即可。如果仍然没有改变，请检查电脑USB接口类型或"),n("a",{attrs:{href:"https://www.openncc.com.cn/jszc",target:"_blank",rel:"noopener noreferrer"}},[t._v("联系我们"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("任意选择一种视频流格式 yuv420p/H.264/H.265/mjpeg。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Stream Resolution")]),t._v("：两种分辨率可供选择，1080p和4K。（具体由OpenNCC产品类型决定）")])])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view3.png",alt:"image-20210702142649007"}})]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1st network model")]),t._v("：选择算法模型。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view4.png",alt:"img"}})]),t._v(" "),n("p",[t._v("目前支持10多种模型可选，选择None即不加载模型，仅显示原始视频流。")]),t._v(" "),n("ul",[n("li",[t._v("可以通过框选ROI区域限制算法区域，算法只对区域内的场景进行识别。")])]),t._v(" "),n("p",[t._v("（具体见"),n("a",{attrs:{href:"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E6%BC%94%E7%A4%BA"}},[t._v("运行结果")]),t._v("展示）")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("2nd network model")]),t._v("：选择二级算法模型。")])]),t._v(" "),n("p",[t._v("示例模型：vehicle-license-plate-detection-barrier-0106-fp16")]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view5.png",alt:"img"}})]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("Model Score")]),t._v(" ：设置算法识别的最低分数，达到阈值后才会在画面中框选出识别结果。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Display Scaler")]),t._v(" ：设置视频显示窗体大小，可以调节显示窗口分辨率。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Exposure control")]),t._v("：设置曝光，可以选择Auto和Manual，当选择Manual时，可以自己设置Exposure times和iso。")])])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view6.png",alt:"img"}})]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view7.png",alt:"image-20210702143055575"}})]),t._v(" "),n("ul",[n("li",[t._v("勾选"),n("code",[t._v("show state")]),t._v("，选择是否在画面上显示当前状态信息，包括视频流帧率、算法帧率、分辨率、设备id。")]),t._v(" "),n("li",[t._v("勾选"),n("code",[t._v("inference accelerate")]),t._v("，选择是否启用算法加速.（必须在加载算法模型前选择）。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view8.png",alt:"img"}})]),t._v(" "),n("ul",[n("li",[t._v("勾选"),n("code",[t._v("save_avi")]),t._v("，视频将在打开视频流后，以时间命名的avi文件保存到目录openncc/Platform/Linux/Viewer/OpenNcc_Linux /avi文件夹下。当关闭视频流后，视频会停止保存。（yuv420p没有此项）")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/linux_view9.png",alt:"img"}})]),t._v(" "),n("h2",{attrs:{id:"快速入门之windows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门之windows"}},[t._v("#")]),t._v(" 快速入门之Windows")]),t._v(" "),n("h3",{attrs:{id:"环境搭建-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-2"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("进入openncc/Platform/Windows")])]),t._v(" "),n("li",[n("p",[t._v("双击运行"),n("code",[t._v("build_windows.bat")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("结果如下：")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("└─ Windows\n\t├─ Source\n\t├─ Viewer\n\t├─ build_windows.sh\n\t├─ README.md\n")])])]),n("ul",[n("li",[t._v("脚本运行成功后，进入openncc/Platform/Windows/Drivers目录, 安装Windows USB驱动。详细安装步骤见 "),n("font",{attrs:{color:"blue"}},[t._v("OpenNCC_USB_Driver_install_guide_win.pdf")]),t._v("。")],1)]),t._v(" "),n("h3",{attrs:{id:"openncc-windows操作演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openncc-windows操作演示"}},[t._v("#")]),t._v(" OpenNCC_Windows操作演示")]),t._v(" "),n("ul",[n("li",[t._v("进入openncc/Platform/Windows/Viewer/OpenNcc_Windows 目录。")]),t._v(" "),n("li",[t._v("双击运行 "),n("code",[t._v("OpenNCC.exe")]),t._v("。")]),t._v(" "),n("li",[t._v("后续操作同"),n("a",{attrs:{href:"#OpenNCC_Linux%E6%93%8D%E4%BD%9C%E6%BC%94%E7%A4%BA"}},[t._v("OpenNCC_Linux")])])]),t._v(" "),n("h2",{attrs:{id:"快速入门之raspberry-pi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门之raspberry-pi"}},[t._v("#")]),t._v(" 快速入门之Raspberry Pi")]),t._v(" "),n("h3",{attrs:{id:"环境搭建-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-3"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("打开终端")])]),t._v(" "),n("li",[n("p",[t._v("进入openncc/Platform/Linux/RaspberryPi")])]),t._v(" "),n("li",[n("p",[t._v("输入命令 "),n("code",[t._v("./build_raspberryp.sh")]),t._v("。")])])]),t._v(" "),n("p",[t._v("运行成功后，会生成目录如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("└── Raspberry\n\t├── Example\n\t├── Source\n\t├── Viewer\n\t├── build_raspberrypi.sh\n\t├── README.md\n")])])]),n("h3",{attrs:{id:"openncc-raspberry-操作演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openncc-raspberry-操作演示"}},[t._v("#")]),t._v(" OpenNCC_Raspberry 操作演示")]),t._v(" "),n("hr"),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("提示：运行OpenNCC_Raspberry之前，请先查看设备号并"),n("a",{attrs:{href:"https://www.openncc.com.cn/jszc",target:"_blank",rel:"noopener noreferrer"}},[t._v("联系我们"),n("OutboundLink")],1),t._v("获取密钥，设备号获取方法详见 openncc/Platform/Raspberry/ReadMe.md")])],1),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("将密钥文件（eyecloud.key）复制到目录openncc/Platform/Linux/RaspberryPi/Viewer/OpenNcc_Raspberry/Configuration/fw")]),t._v(" "),n("li",[t._v("回到目录l openncc/Platform/Linux/RaspberryPi/Viewer/OpenNcc_Raspberry")]),t._v(" "),n("li",[t._v("打开终端，执行 "),n("code",[t._v("sudo ./AppRun")]),t._v("，启动软件。")]),t._v(" "),n("li",[t._v("后续操作同"),n("a",{attrs:{href:"#OpenNCC_Linux%E6%93%8D%E4%BD%9C%E6%BC%94%E7%A4%BA"}},[t._v("OpenNCC_Linux")]),t._v("。")])]),t._v(" "),n("h2",{attrs:{id:"快速入门之nvidia"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门之nvidia"}},[t._v("#")]),t._v(" 快速入门之NVIDIA")]),t._v(" "),n("h3",{attrs:{id:"环境搭建-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-4"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("ul",[n("li",[t._v("进入目录"),n("code",[t._v("opennccc/Platform/Linux/NVIDIA")]),t._v("。")]),t._v(" "),n("li",[t._v("右键打开终端。")]),t._v(" "),n("li",[t._v("输入命令 "),n("code",[t._v("./build_nvidia.sh")]),t._v("。")])]),t._v(" "),n("p",[t._v("运行成功后，会生成目录如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("└─ NVIDIA\n\t├─ Example\n\t├─ Source\n\t├─ build_nvidia.sh\n\t├─ README.md\n")])])]),n("h2",{attrs:{id:"快速入门之yolo数据的云端推送"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门之yolo数据的云端推送"}},[t._v("#")]),t._v(" 快速入门之YOLO数据的云端推送")]),t._v(" "),n("h3",{attrs:{id:"环境搭建-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-5"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("提示：本操作基于上述几个平台的opencv等基础环境已经搭建完毕。")])],1),t._v(" "),n("ul",[n("li",[t._v("在此基础上，针对ubuntu和Raspberry")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("cd ~\nwget http://curl.haxx.se/download/curl-7.57.0.tar.gz\ntar -xzvf curl-7.57.0.tar.gz\ncd curl-7.57.0/\n./configure\nmake\nsudo make install\n")])])]),n("ul",[n("li",[t._v("针对NVIDIA")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1.install zlib:\n$ down from http://zlib.net/zlib-1.2.5.tar.gz\n$ tar zxf zlib-1.2.5\n$ cd zlib-1.2.5\n$ mkdir zlib_install\n$ export CC=gcc\n$ ./configure --prefix=/home/zlib-1.2.5/zlib_install\n$ make -j8\n$ make install\n\n2.install openssl:\n$ down from https://www.openssl.org/source/openssl-3.0.1.tar.gz\n$ tar zxf openssl-3.0.1.tar.gz\n$ cd openssl-3.0.1\n$ mkdir openssl_install\n$ ./config no-asm shared --prefix=/home/openssl-3.0.1/openssl_install\n$ make -j8\n$ make install\n\n3.install curl:\n$ wget http://curl.haxx.se/download/curl-7.57.0.tar.gz\n$ tar -xzvf curl-7.57.0.tar.gz\n$ cd curl-7.57.0/\n$ ./configure --with-openssl=/home/openssl/openssl_install\n$ make\n$ make install\n")])])]),n("h3",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("该程序旨在帮助用户方便地在OpenNCC上使用YOLO模型，包括YOLO的训练和转化，模型在OpenNCC设备上的部署，识别结果的打包并上传云端。"),n("br"),t._v(" "),n("font",{attrs:{color:"red"}},[t._v("提示：本演示已带默认生成的yolo模型数据。")])],1),t._v(" "),n("h3",{attrs:{id:"操作演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作演示"}},[t._v("#")]),t._v(" 操作演示")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("打开终端")])]),t._v(" "),n("li",[n("p",[t._v("针对不同平台进入openncc/Platform/NVIDIA")]),t._v(" "),n("p",[t._v("或者 openncc/Platform/Raspberry")]),t._v(" "),n("p",[t._v("或者 openncc/Platform/Ubuntu")])]),t._v(" "),n("li",[n("p",[t._v("相对应输入命令 "),n("code",[t._v("./build_nvidia.sh")]),t._v(" 或者 "),n("code",[t._v("build_raspberrypi.sh")]),t._v("  或者  "),n("code",[t._v("./build_ubuntu.sh")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("运行成功后，会相应生成目录")])]),t._v(" "),n("li",[n("p",[t._v("进入 "),n("code",[t._v("Example/How_to/OpenNCC/C&C++/How_to_use_sdk")]),t._v(" 目录")])]),t._v(" "),n("li",[n("p",[t._v("输入命令 "),n("code",[t._v("make all")])])]),t._v(" "),n("li",[n("p",[t._v("编译成功后进入bin目录 "),n("code",[t._v("cd ./bin")])])]),t._v(" "),n("li",[n("p",[t._v("输入命令  "),n("code",[t._v("sudo ./OpenNCC 5")]),t._v(" 执行程序")])])]),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("提示：程序首次运行请查看终端打印获取该设备的设备号，请"),n("a",{attrs:{href:"https://www.openncc.com.cn/jszc",target:"_blank",rel:"noopener noreferrer"}},[t._v("联系我们"),n("OutboundLink")],1),t._v("为该设备开通云端权限。")])],1),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/yolo_1.png",alt:"img"}})]),t._v(" "),n("h3",{attrs:{id:"关于yolo模型训练"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于yolo模型训练"}},[t._v("#")]),t._v(" 关于YOLO模型训练")]),t._v(" "),n("p",[t._v("介绍如何进行模型训练，训练获得的数据提供给"),n("a",{attrs:{href:"#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B9%8BYOLO%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%91%E7%AB%AF%E6%8E%A8%E9%80%81"}},[t._v("OpenNCC_YOLO")]),t._v("使用。")]),t._v(" "),n("h4",{attrs:{id:"安装环境依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装环境依赖"}},[t._v("#")]),t._v(" 安装环境依赖")]),t._v(" "),n("ul",[n("li",[n("p",[n("em",[t._v("CMake >= 3.18")]),t._v("*: "),n("code",[t._v("https://cmake.org/download/")])])]),t._v(" "),n("li",[n("p",[n("em",[t._v("Powershell")]),t._v("* (already installed on windows): "),n("code",[t._v("https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell")])])]),t._v(" "),n("li",[n("p",[n("em",[t._v("CUDA >= 10.2")]),t._v("*（可选）: "),n("code",[t._v("https://developer.nvidia.com/cuda-toolkit-archive")])])]),t._v(" "),n("li",[n("p",[n("em",[t._v("OpenCV >= 2.4")]),t._v("*")])]),t._v(" "),n("li",[n("p",[n("em",[t._v("cuDNN >= 8.0.2")]),t._v("*（可选） "),n("code",[t._v("https://developer.nvidia.com/rdp/cudnn-archive")])])]),t._v(" "),n("li",[n("ul",[n("li",[t._v("(on "),n("strong",[t._v("Linux")]),t._v(" follow steps described here) "),n("code",[t._v("https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar")])])])]),t._v(" "),n("li",[n("ul",[n("li",[t._v("(onWindows follow steps described here) "),n("code",[t._v("https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installwindows)")])])])]),t._v(" "),n("li",[n("p",[n("em",[t._v("GPU with CC >= 3.0")]),t._v("*（可选）: https://en.wikipedia.org/wiki/CUDA#GPUs_supported")])])]),t._v(" "),n("h4",{attrs:{id:"训练工具编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#训练工具编译"}},[t._v("#")]),t._v(" 训练工具编译")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git clone https://github.com/AlexeyAB/darknetcd darknet\nmkdir build_releasecd build_release\ncmake ..\ncmake --build . --target install --parallel 8\n")])])]),n("h4",{attrs:{id:"准备数据集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备数据集"}},[t._v("#")]),t._v(" 准备数据集")]),t._v(" "),n("ul",[n("li",[t._v("训练集图片放在train文件夹内，验证集放在val文件夹内")])]),t._v(" "),n("h4",{attrs:{id:"数据标注"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据标注"}},[t._v("#")]),t._v(" 数据标注")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git clone https://hub.fastgit.org/AlexeyAB/Yolo_mark.git     \ncmake .     \nmake    \n./linux_mark.sh\n")])])]),n("ul",[n("li",[t._v("关于标注的使用方法可查看Yolo_mark目录内的readme.md")])]),t._v(" "),n("h4",{attrs:{id:"参数配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数配置"}},[t._v("#")]),t._v(" 参数配置")]),t._v(" "),n("ul",[n("li",[t._v("除两个数据集外，启动训练还需要配置几个参数文件，包括obj.data，obj.name，train.txt。")])]),t._v(" "),n("p",[t._v("以上三个文件,会在数据标注时自动生成在"),n("code",[t._v("Yolo_mark/x64/Release/data")]),t._v("目录下：")]),t._v(" "),n("p",[t._v("obj.name文件包含所有目标的类别名，train.txt包含所有训练图片路径，val.txt非必须，可以手动从train文件中分割出30%的图片用于验证。而obj.data文件申明了上述所有文件的路径和类别总数，如果使用自己的数据集，对应参数修改请在标注前完成修改。")]),t._v(" "),n("ul",[n("li",[t._v("yolo.cfg(拓扑)"),n("br"),t._v("\nYolo.conv（预训练权重）\ncfg和conv存在一定对应关系，考虑此处训练的模型最终需部署在openncc上，推荐使用（yolov4-tiny.cfg+yolov4-tiny.conv.29）或（yolov3-tiny.cfg+yolov3-tiny.conv.11）的搭配，cfg文件可以直接在darknet/cfg目录下找到。\nCfg文件修改！！\n如果目标类别数量不等于80，则必须修改cfg文件。\n搜索cfg文件中所有yolo层的位置，若总共有3 类目标，则将[yolo]层classes参数定义为3，再将[yolo]上一层[convolutional]层的filters定义为24.计算方式为filters=（classes+5）*3。\n对yolov4-tiny.cfg来说有两个yolo层，所以一共需要修改4个参数。")])]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/yolo_3.png",alt:"img"}})]),t._v(" "),n("h4",{attrs:{id:"启动训练"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动训练"}},[t._v("#")]),t._v(" 启动训练")]),t._v(" "),n("p",[t._v("第二步编译成功后，会在darknet目录下生成./darknet工具。")]),t._v(" "),n("p",[t._v("输入命令：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("./darknet detector train ./obj.data ./yolov4-tiny.cfg ./yolov4-tiny.conv.2\n")])])]),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/yolo_4.png",alt:"img"}})]),t._v(" "),n("p",[t._v("如果你使用显卡训练，显存小于8G的显卡，需要在cfg的第一层[net]中将batch参数改到8以下（8，4，2，1）。\n若训练进行顺利，可看到如下图的训练日志图表。\n训练结束后，可看到一系列.weights文件。这里还是建议制作数据集时设置一个验证集，这样可以直接锁定验证集中map最高的权重yolov4-tiny_best.weights作为后续使用。")]),t._v(" "),n("ul",[n("li",[t._v("Darknet to tensorflow")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git clone https://github.com/RenLuXi/tensorflow-yolov4-tiny.git\ncd tensorflow-yolov4-tiny\npython convert_weights_pb.py --class_names obj.names --weights_file yolov4-tiny_best.weights --tiny\n")])])]),n("p",[t._v("这里需要用到第五步中obj.names和yolov4-tiny_best.weights.")]),t._v(" "),n("ul",[n("li",[t._v("Tensorflow to IR(openvino推理格式)"),n("br"),t._v("\n修改json配置文件\n打开tensorflow-yolov4-tiny目录下的yolo_v4_tiny.json，将其中的classes值修改为你自己的类别数，openvino进行tensorflow转换需要用到这个文件。\n然后替换json配置文件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ cp ./yolo_v4_tiny.json  /opt/intel/openvino/deployment_tools/model_optimizer/extensions/front/tf\n")])])]),n("p",[t._v("进入openvino模型转换工具目录")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ cd /opt/intel/openvino/deployment_tools/model_optimizer\n")])])]),n("p",[t._v("转换命令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ python mo.py --input_model yolov4-tiny.pb --transformations_config ./extensions/front/tf/yolo_v4_tiny.json --batch 1 --data_type FP32 --reverse_input_channels\n")])])]),n("ul",[n("li",[t._v("IR to blob\n老办法，先初始化openvino环境，然后把上一步生成的xml和bin文件丢过去转换")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source /opt/intel/openvino_2020.3.194/bin/setupvars.sh\n\ncd /opt/intel/openvino_2020.3.194/deployment_tools/inference_engine/lib/intel64\n\ncp /opt/intel/openvino/deployment_tools/model_optimizer/yolov4-tiny.xml ./\ncp /opt/intel/openvino/deployment_tools/model_optimizer/yolov4-tiny.bin ./\n\n/opt/intel/openvino_2020.3.194/deployment_tools/inference_engine/lib/intel64/myriad_compile -m yolov4-tiny.xml -o yolov4-tiny.blob -VPU_MYRIAD_PLATFORM VPU_MYRIAD_2480 -VPU_NUMBER_OF_SHAVES 6 -VPU_NUMBER_OF_CMX_SLICES 6\n")])])]),n("h4",{attrs:{id:"使用模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用模型"}},[t._v("#")]),t._v(" 使用模型")]),t._v(" "),n("ul",[n("li",[t._v("转化完成后，至此，已经获得了在OpenNCC上部署所需的全部模型文件，xml，bin和blob。")])]),t._v(" "),n("h2",{attrs:{id:"custom-自定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-自定义"}},[t._v("#")]),t._v(" Custom（自定义）")]),t._v(" "),n("h3",{attrs:{id:"环境搭建-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-6"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("进入openncc/Platform/Custom。")])]),t._v(" "),n("li",[n("p",[t._v("右键打开终端。")])]),t._v(" "),n("li",[n("p",[t._v("输入命令 "),n("code",[t._v("./custom.sh")])])])]),t._v(" "),n("hr"),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("提示：如需在自定义平台运行，请"),n("a",{attrs:{href:"https://www.openncc.com.cn/jszc",target:"_blank",rel:"noopener noreferrer"}},[t._v("联系我们"),n("OutboundLink")],1),t._v("获取定制化服务。")])],1),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"运行结果演示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行结果演示"}},[t._v("#")]),t._v(" 运行结果演示")]),t._v(" "),n("p",[t._v("以物体分类算法模型为例：")]),t._v(" "),n("p",[t._v("香蕉在算法区域内结果：")]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/bannna.png",alt:"image-20210702145523142"}})]),t._v(" "),n("p",[t._v("苹果在算法区域内结果：")]),t._v(" "),n("p",[n("img",{attrs:{src:"/openncc/docimg/ch/apple.png",alt:"image-20210702145621696"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);